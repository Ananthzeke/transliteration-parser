import re
import regex
import json
import pandas as pd 
from flashtext import KeywordProcessor

class MemoryWordReplacer:
    def __init__(self,dictionary:dict,src_lang:str):
        self.dictionary=cleaned_dict = {key: value for key, value in dictionary.items() if value is not None and not isinstance(value, list)}
        self.kw_processor=KeywordProcessor()
        [self.kw_processor.add_keyword(key,value) for key,value in self.dictionary.items()]
        self.english_pattern=re.compile(r'[A-Za-z+]')
        self.non_romanized_pattern = regex.compile(r'[\p{Z}\p{P}\p{S}\p{N}]+')
        self.mixed_word_pattern = re.compile(r'[A-Za-z]')
        self.allowed_mixed_word_pattern = re.compile(r'^[a-zA-Z0-9\s.,\'"!?]+$')
        self.regex_replacer=re.compile(r'(?<!\w)(' + '|'.join(re.escape(key) for key in self.dictionary.keys()) + r')(?!\w)')
        self.src_lang=src_lang
        self.indic_script_patterns={
        "Arab": re.compile(r"[\u0600-\u06FF]"),
        "Beng": re.compile(r"[\u0980-\u09FF]"),
        "Deva": re.compile(r"[\u0900-\u097F]"),
        "Guru": re.compile(r"[\u0A00-\u0A7F]"),
        "Gujr": re.compile(r"[\u0A80-\u0AFF]"),
        "Orya": re.compile(r"[\u0B00-\u0B7F]"),
        "Taml": re.compile(r"[\u0B80-\u0BFF]"),
        "Telu": re.compile(r"[\u0C00-\u0C7F]"),
        "Knda": re.compile(r"[\u0C80-\u0CFF]"),
        "Mlym": re.compile(r"[\u0D00-\u0D7F]"),
    }

    def remove_english_words(self,s):
        return self.english_pattern.sub('', s)
        
    def remove_english_words_and_empty_strings(self,words):
        pattern = re.compile(r'^[a-zA-Z]+$')
        filtered_words = [word for word in words if not pattern.match(word) and word.strip()]
        return filtered_words

    def split_non_romanized_string(self, text):
            words = [word.strip() for word in self.non_romanized_pattern.split(text) if self.remove_english_words(word)]
            return words
            
    def extract_script_words(self, sentence):
        script_name=self.src_lang.split('_')[1]
        if script_name not in self.indic_script_patterns:
            print (f"Script name '{script_name}' is not supported.")
        pattern = self.indic_script_patterns[script_name]
        # Split the sentence into words and filter those that contain characters matching the script's pattern
        words = [word for word in sentence.split() if pattern.search(word)]
        return words

    
    def mixed_words(self,text):
        if not isinstance(text, str):
            raise ValueError("Input must be a string.")
        return {
            word for word in  self.extract_script_words(text) 
            if bool(self.english_pattern.search(word)) 
        }
    
    # def fix_mixed_words(self,org_text,transliterated_text):
    #     """
    #     Replaces words in transliterated_text with their original counterparts from org_text
    #     based on the criteria defined by mixed_words().
        
    #     Parameters:
    #     - org_text: The original text.
    #     - transliterated_text: The transliterated version of the text.
        
    #     Returns:
    #     A string where specific words identified by mixed_words() in transliterated_text
    #     are replaced with their counterparts from org_text.
    #     """
    #     org_text_list = org_text.split(' ')
    #     transliterated_text_list = transliterated_text.split(' ')
    #     mixed_words = self.mixed_words(transliterated_text)
    #     if mixed_words:
    #         try:
    #             word_mapping={key: value for key, value in zip(transliterated_text_list,org_text_list)}
    #             mixed_to_org_words={word:word_mapping[word] for word in mixed_words}
    #             transliterated_text=re.sub("|".join(map(re.escape, mixed_to_org_words.keys())), lambda mo: mixed_to_org_words[mo.group()], transliterated_text)
    #             return self.fix_mixed_words(org_text,transliterated_text)
    #         except Exception as e:
    #             # print(f'{e}')
    #             threshold=4
    #             if len(mixed_words)<=threshold:
    #                 return transliterated_text
    #             else:
    #                 if non_romanized_words:=self.split_non_romanized_string(org_text):
    #                     try:
    #                         small_dict = {word: self.dictionary[word] if word in self.dictionary else word for word in non_romanized_words}
    #                         transliterated_text=re.sub("|".join(map(re.escape, small_dict.keys())), lambda mo: small_dict[mo.group()], transliterated_text)
    #                         return transliterated_text
    #                     except Exception as e:
    #                         # print("Couldnt replace so returning original text")
    #                         return org_text
    #     return transliterated_text

    def fix_mixed_words(self,org_text,transliterated_text):
        """
        Replaces words in transliterated_text with their original counterparts from org_text
        based on the criteria defined by mixed_words().
        
        Parameters:
        - org_text: The original text.
        - transliterated_text: The transliterated version of the text.
        
        Returns:
        A string where specific words identified by mixed_words() in transliterated_text
        are replaced with their counterparts from org_text.
        """
        org_text_list = org_text.split(' ')
        transliterated_text_list = transliterated_text.split(' ')
        mixed_words = self.mixed_words(transliterated_text)
        if mixed_words:
            try:
                word_mapping={key: value for key, value in zip(transliterated_text_list,org_text_list)}
                mixed_to_org_words={word:word_mapping[word] for word in mixed_words}
                transliterated_text=re.sub("|".join(map(re.escape, mixed_to_org_words.keys())), lambda mo: mixed_to_org_words[mo.group()], transliterated_text)
                return self.fix_mixed_words(org_text,transliterated_text)
            except Exception as e:
                threshold=4
                if len(mixed_words)<=threshold:
                    return transliterated_text
                else:
                    if non_romanized_words:=self.extract_script_words(org_text):
                        try:
                            for word in non_romanized_words:
                                if word in self.dictionary.keys():
                                    transliterated_text=transliterated_text.replace(f' {word} ',f' {self.dictionary[word]} ')
                            return transliterated_text
                        except Exception as e:
                            print(e)
                            # print("Couldnt replace so returning original text")
                            return org_text
        return transliterated_text

    def multiple_replace(self,replacements, text):
        text=f" {text} "
        # Create a regular expression from the dictionary keys with spaces
        try:

            if self.src_lang.split('_')[1] == "Deva":
                # pass
                pattern =  r"ред(\s|$)"
                replacement = r" . \1"
                text=re.sub(pattern, replacement, text)
                pattern_universal = r"ред"
                replacement = " . "
                text=re.sub(pattern_universal, replacement, text)
            # if self.src_lang.split('_')[1] =="Arab":
            #     pattern_universal = r"ред"
            #     replacement = "."
            #     text=re.sub(pattern_universal, replacement, text)
                pass

            text=self.kw_processor.replace_keywords(text)
        except Exception as e:
            print(e,'trying regex replacer')
            text=self.regex_replacer.sub(lambda x: self.dictionary[x.group()], text)
        return text.strip()
    
    def find(self,text):
        pattern = r'\b\w*\d\w*\b'
        # Filter words with at least one number
        words_with_numbers = re.findall(pattern, text)
        # Remove English letters and numbers
        cleaned_words = [re.sub(r'[a-zA-Z\d]', '', word) for word in words_with_numbers]
        final_list = [word.replace('"','').replace('(','').replace(')','').replace(',','') for word in cleaned_words if word!='']
        return final_list 

    
    def replace_batches(self,batch,use_placeholder=True):
        if self.dictionary not in (None, {}):
            if use_placeholder:
                placeholder=' [batch] '
                text=placeholder.join(batch)
                transliterated_text=self.multiple_replace(self.dictionary,text)
                transliterated_batch=transliterated_text.split(placeholder)
            else:
                transliterated_batch=[self.multiple_replace(self.dictionary,text) for text in batch]

            if transliterated_batch:
                fixed_batch = [
                        self.fix_mixed_words(org_string, transliterated_string)
                        for org_string, transliterated_string in zip(batch, transliterated_batch)
                    ]
                # missing_words=[[].append('') if self.extract_script_words(sent)==[] else self.extract_script_words(sent) 
                # for sent in fixed_batch ]


                refix=''
                untransliterated_words=self.find(placeholder.join(fixed_batch))
                # print(untransliterated_words)
                for word in untransliterated_words:
                    if word in self.dictionary.keys():
                        refix=placeholder.join(fixed_batch).replace(word,self.dictionary[word])
                if refix:
                    fixed_batch=refix.split(placeholder)

                missing_words=[self.extract_script_words(sent) for sent in fixed_batch]
                missing_words_new=[[].append('') if words ==[] else words for words in missing_words ]
                if missing_words:
                    script_name=self.src_lang.split('_')[1]
                    fixed_batch=[self.indic_script_patterns[script_name].sub('',sent) for sent in fixed_batch]
                    # print(fixed_batch)
                return fixed_batch,missing_words_new
            else:
                print('Failed on transliteration returning Orginal text')
                missing_words=[[].append('') if self.extract_script_words(sent)==[] else self.extract_script_words(sent) 
                for sent in batch ]
            return batch, [[]]
        else:
            print(f'Dictionary is None')    
            return batch, [[]]



def load_json_as_dict(file_path):
    try:
        with open(file_path, 'r') as file:
            data = json.load(file)

            return data
    except FileNotFoundError:
        print("The file was not found.")
        return None
    except json.JSONDecodeError:
        print("Error decoding JSON.")
        return None
    except Exception as e:
        print(f"An error occurred: {e}")
        return None
    
if __name__=='__main__':

    dictionary=load_json_as_dict('unique_words/tam.json')
    a=MemoryWordReplacer(dictionary,'tam_Taml')
    text=['''роорпБройро┐роЪрпНроЪро┐ро▓ро┐ро░рпБроирпНродрпБ ро░рпЛроорпН ро╡ро░рпИ роирпАроЩрпНроХро│рпН рокропрогро┐роХрпНроХ рокро▓ ро╡ро┤ро┐роХро│рпН роЗроЩрпНроХрпЗроГ

1. ро╡ро┐рооро╛ройрокрпН рокропрогроорпН роорпВро▓роорпН роорпБройро┐роХрпНроХро┐ро▓ро┐ро░рпБроирпНродрпБ ро░рпЛроорпН ро╡ро░рпИ рокропрогро┐роХрпНроХ рооро┐роХро╡рпБроорпН рокрпКродрпБро╡ро╛рой рооро▒рпНро▒рпБроорпН ро╡рпЗроХрооро╛рой ро╡ро┤ро┐ропро╛роХ роЗро░рпБроХрпНроХро▓ро╛роорпН. роирпАроЩрпНроХро│рпН роОрокрпНрокрпЛродрпБ рокро▒роХрпНроХро┐ро▒рпАро░рпНроХро│рпН, роЙроЩрпНроХро│рпН роЯро┐роХрпНроХрпЖроЯрпН ро╡роХрпБрокрпНрокрпБ рооро▒рпНро▒рпБроорпН роЙроЩрпНроХро│рпН роЯро┐роХрпНроХрпЖроЯрпНроЯрпБроХро│рпИ ро╡ро╛роЩрпНроХрпБроорпН родрпЗродро┐роХрпНроХрпБ роОро╡рпНро╡ро│ро╡рпБ роирпЖро░рпБроХрпНроХрооро╛роХ роЗро░рпБроХрпНроХро┐ро▒рпАро░рпНроХро│рпН роОройрпНрокродрпИрокрпН рокрпКро▒рпБродрпНродрпБ, ро╡ро┐ро▓рпИ $100 (91 ропрпВро░рпЛроХрпНроХро│рпН) роХрпНроХрпБроорпН роХрпБро▒рпИро╡ро╛роХ роЗро░рпБроирпНродрпБ $500 (455 ропрпВро░рпЛроХрпНроХро│рпН) ро╡ро░рпИ рооро╛ро▒рпБрокроЯрпБроорпН. роирпАроЩрпНроХро│рпН рокрогродрпНродрпИ роЪрпЗрооро┐рокрпНрокродрпИ роЙро▒рпБродро┐роЪрпЖропрпНроп роЙроЩрпНроХро│рпН рокропрогродрпНродрпИродрпН родро┐роЯрпНроЯрооро┐роЯрпНроЯрпБ роорпБройрпНроХрпВроЯрпНроЯро┐ропрпЗ роЯро┐роХрпНроХрпЖроЯрпНроЯрпБроХро│рпИ ро╡ро╛роЩрпНроХрпБро╡родрпИ роЙро▒рпБродро┐рокрпНрокроЯрпБродрпНродро┐роХрпН роХрпКро│рпНро│рпБроЩрпНроХро│рпН. роорпЗро▓рпБроорпН, роорпБройро┐роЪрпН роТро░рпБ рокрпЖро░ро┐роп ро╡ро┐рооро╛рой роиро┐ро▓рпИропродрпНродрпИроХрпН (роорпНропрпВроХрпН) роХрпКрогрпНроЯро┐ро░рпБроирпНродро╛ро▓рпБроорпН, ро░рпЛроорпН роЗро░рогрпНроЯрпБ рокрпЖро░ро┐роп роЪро░рпНро╡родрпЗроЪ ро╡ро┐рооро╛рой роиро┐ро▓рпИропроЩрпНроХро│рпИроХрпН (роОроГрокрпНроЪро┐роУ рооро▒рпНро▒рпБроорпН роЪро┐роРроП) роХрпКрогрпНроЯрпБро│рпНро│родрпБ. ро╡ро┐рооро╛рой роиро┐ро▓рпИропроорпН, рокро╛родрпБроХро╛рокрпНрокрпБ роХрпЛроЯрпБроХро│рпН рооро▒рпНро▒рпБроорпН роЪрпБроЩрпНроХ ро╡ро░ро┐роХро│ро┐ро▓рпН роирпЗро░родрпНродрпИроХрпН роХрогроХрпНроХро┐роЯро╛рооро▓рпН, роорпБройро┐роЪрпНроЪро┐ро▓ро┐ро░рпБроирпНродрпБ ро░рпЛроорпН ро╡ро░рпИ рокропрогро┐роХрпНроХ ро╡ро┐рооро╛ройродрпНродро┐ро▓рпН роЪрпБрооро╛ро░рпН 90 роиро┐рооро┐роЯроЩрпНроХро│рпН роЖроХрпБроорпН.

2. ро░ропро┐ро▓рпН роорпВро▓роорпН-ро░ропро┐ро▓рпН роорпВро▓роорпН рокропрогроорпН роЪрпЖропрпНро╡родрпБ роорпБройро┐роЪрпНроЪро┐ро▓ро┐ро░рпБроирпНродрпБ ро░рпЛроорпН роЪрпЖро▓рпНро╡родро▒рпНроХро╛рой рооро▒рпНро▒рпКро░рпБ рокрпКродрпБро╡ро╛рой ро╡ро┤ро┐ропро╛роХрпБроорпН. ро╡ро┐рооро╛ройродрпНродрпИ ро╡ро┐роЯ роЕродро┐роХ роирпЗро░роорпН роОроЯрпБроХрпНроХрпБроорпН роОройрпНро▒ро╛ро▓рпБроорпН, роЯро┐роХрпНроХрпЖроЯрпН рооро┐роХро╡рпБроорпН рооро▓ро┐ро╡ро╛ройродрпБ рооро▒рпНро▒рпБроорпН рокропрог роиро╛ро│ро┐ро▓рпН ро╡ро╛роЩрпНроХрокрпНрокроЯро▓ро╛роорпН. роорпБройро┐роЪрпНроЪро┐ро▓ро┐ро░рпБроирпНродрпБ ро░рпЛроорпН роЪрпЖро▓рпНро▓рпБроорпН роТро░рпБ ро╡ро┤ро┐ ро░ропро┐ро▓рпН роЯро┐роХрпНроХрпЖроЯрпН роЪрпБрооро╛ро░рпН $35 (32 ропрпВро░рпЛроХрпНроХро│рпН) роЪрпЖро▓ро╡ро╛роХрпБроорпН, роорпЗро▓рпБроорпН рокро╛родрпИ рооро▒рпНро▒рпБроорпН роиро┐ро▒рпБродрпНродроЩрпНроХро│ро┐ройрпН роОрогрпНрогро┐роХрпНроХрпИропрпИрокрпН рокрпКро▒рпБродрпНродрпБ 9-12 роорогро┐роирпЗро░роЩрпНроХро│рпБроХрпНроХрпБ роЗроЯрпИропро┐ро▓рпН роОроЯрпБроХрпНроХрпБроорпН.

3. роХро╛ро░рпН роорпВро▓роорпН-роорпБройро┐роЪрпНроЪро┐ро▓ро┐ро░рпБроирпНродрпБ ро░рпЛроорпН ро╡ро░рпИ роХро╛ро░ро┐ро▓рпН рокропрогроорпН роЪрпЖропрпНро╡родрпБроорпН роТро░рпБ ро╡ро┐ро░рпБрокрпНрокрооро╛роХрпБроорпН. ро╡ро░рпИропро▒рпБроХрпНроХрокрпНрокроЯрпНроЯ роиро┐ро▒рпБродрпНродроЩрпНроХро│рпБроЯройрпН, роорпБройро┐роЪрпНроЪро┐ро▓ро┐ро░рпБроирпНродрпБ ро░рпЛроорпН ро╡ро░рпИ ро╡ро╛роХройроорпН роУроЯрпНроЯ роЪрпБрооро╛ро░рпН 10 роорогро┐ роирпЗро░роорпН роЖроХрпБроорпН, роЖройро╛ро▓рпН роТро░рпБ роХро╛ро░рпИ ро╡рпИродрпНродро┐ро░рпБрокрпНрокродрпБ роирпАроЩрпНроХро│рпН рокро╛ро░рпНроХрпНроХ ро╡ро┐ро░рпБроорпНрокрпБроорпН роОроирпНрод роироХро░роЩрпНроХро│ро┐ро▓рпБроорпН роЕро▓рпНро▓родрпБ родро│роЩрпНроХро│ро┐ро▓рпБроорпН роиро┐ро▒рпБродрпНрод роирпЖроХро┐ро┤рпНро╡рпБродрпНродройрпНроорпИропрпИ роЕройрпБроородро┐роХрпНроХрпБроорпН. 

роЙроЩрпНроХро│рпН роХрпБро▒ро┐рокрпНрокро┐роЯрпНроЯ родрпЗро╡рпИроХро│рпИрокрпН рокрпКро▒рпБродрпНродрпБ, роЗроирпНрод роорпВройрпНро▒рпБ ро╡ро┐ро░рпБрокрпНрокроЩрпНроХро│рпБроорпН роорпБройро┐роЪрпНроЪро┐ро▓ро┐ро░рпБроирпНродрпБ ро░рпЛроорпН ро╡ро░рпИ рокропрогро┐роХрпНроХ роЪро╛родрпНродро┐ропрооро╛рой ро╡ро┤ро┐роХро│ро╛роХ роЗро░рпБроХрпНроХро▓ро╛роорпН.''']
    new_text=a.replace_batches(text)
    print(new_text)
    # df=pd.DataFrame({'text':text})
    # df=df.replace(dictionary,regex=True)
    # print(df['text'][0])
    # print(a.mixed_words('роорпБройро┐роЪрпНроЪро┐ро▓ро┐ро░рпБроирпНродрпБ ро░рпЛроорпН ро╡ро░рпИ роирпАроЩрпНроХро│рпН рокропрогро┐роХрпНроХ рокро▓ ро╡ро┤ро┐роХро│рпН роЗkроЩрпНроХрпЗроГ '))
    # p=a.mixed_words(''''роорпБройро┐роЪрпНchiiliiро░рпБроирпНthuu roam varai neengkal payanikka pala vazhigal ingkaehuuu\n\n1. ро╡ро┐рооро╛ройрокрпН рокропрогmuuuuрпН moolam роорпБройро┐роХрпНроХро┐ро▓ро┐ро░рпБроирпНродрпБ roam varai payanikka рооро┐роХро╡рпБроорпН podhuvaana mattrum vaekamaana vazhiyaaga irukkalaam. neengkal eppoathu рокро▒роХрпНроХро┐ро▒рпАро░рпНроХро│рпН, ungkal роЯро┐роХрпНроХрпЖроЯрпН vaguppu mattrum ungkal роЯро┐роХрпНроХрпЖроЯрпНduukazhaрпИ ро╡ро╛роЩрпНроХрпБроорпН thaethikku evvalavu nerukkamaaga роЗро░рпБроХрпНроХро┐ро▒рпАро░рпНроХро│рпН роОройрпНрокродрпИрокрпН рокрпКро▒рпБродрпНродрпБ, ро╡ро┐ро▓рпИ $100 (91 ропрпВро░рпЛроХрпНроХро│рпН) роХрпНроХрпБроорпН kuraivaaga irunthu $500 (455 ропрпВро░рпЛроХрпНроХро│рпН) varai рооро╛ро▒рпБрокроЯрпБроорпН. neengkal рокрогродрпНродрпИ роЪрпЗрооро┐рокрпНрокродрпИ uruthiseiya ungkal рокропрогродрпНродрпИродрпН родро┐роЯрпНроЯрооро┐роЯрпНроЯрпБ роорпБройрпНроХрпВроЯрпНроЯро┐ропрпЗ роЯро┐роХрпНроХрпЖроЯрпНduukazhaрпИ ро╡ро╛роЩрпНроХрпБро╡родрпИ роЙро▒рпБродро┐рокрпНрокроЯрпБродрпНродро┐роХрпН kollungal. maelum, роорпБройро┐роЪрпН oru periya ро╡ро┐рооро╛рой роиро┐ро▓рпИропродрпНродрпИроХрпН (роорпНропрпВроХрпН) роХрпКрогрпНроЯро┐ро░рпБроирпНродро╛ро▓рпБроорпН, roam irandu periya sarvadesa ро╡ро┐рооро╛рой роиро┐ро▓рпИропроЩрпНроХро│рпИроХрпН (роОроГрокрпНроЪро┐роУ mattrum роЪро┐роРроП) роХрпКрогрпНроЯрпБро│рпНро│родрпБ. ро╡ро┐рооро╛рой роиро┐ро▓рпИропроорпН, рокро╛родрпБроХро╛рокрпНрокрпБ роХрпЛроЯрпБроХро│рпН mattrum sunga ро╡ро░ро┐роХро│ро┐ро▓рпН роирпЗро░родрпНродрпИроХрпН роХрогроХрпНроХро┐роЯро╛рооро▓рпН, роорпБройро┐роЪрпНchiiliiро░рпБроирпНthuu roam varai payanikka ро╡ро┐рооро╛ройродрпНродро┐ро▓рпН sumar 90 nimidangal aagum.\n\n2. rayil роорпВро▓роорпН-ро░ропро┐ро▓рпН moolam рокропрогmuuuuрпН seivathu роорпБройро┐роЪрпНchiiliiро░рпБроирпНthuu roam selvatharkaana рооро▒рпНро▒рпКро░рпБ podhuvaana ро╡ро┤ро┐ропро╛роХрпБроорпН. ро╡ро┐рооро╛ройродрпНродрпИ vida adhiga neram edukkum роОройрпНро▒ро╛ро▓рпБроорпН, роЯро┐роХрпНроХрпЖроЯрпН рооро┐роХро╡рпБроорпН malivaanathuu mattrum рокропрог роиро╛ро│ро┐ро▓рпН vaangkappadalaam. роорпБройро┐роЪрпНchiiliiро░рпБроирпНthuu roam роЪрпЖро▓рпНро▓рпБроорпН oru vazhi rayil роЯро┐роХрпНроХрпЖроЯрпН sumar $35 (32 ропрпВро░рпЛроХрпНроХро│рпН) selavaagum, maelum paathai mattrum роиро┐ро▒рпБродрпНродроЩрпНроХро│ро┐ройрпН роОрогрпНрогро┐роХрпНроХрпИропрпИрокрпН рокрпКро▒рпБродрпНродрпБ 9-12 роорогро┐роирпЗро░роЩрпНроХро│рпБроХрпНроХрпБ idaiyil edukkum.\n\n3. kaarr роорпВро▓роорпН-роорпБройро┐роЪрпНроЪро┐ро▓ро┐ро░рпБроирпНродрпБ roam varai qaariill рокропрогmuuuuрпН роЪрпЖропрпНро╡родрпБроорпН oru ро╡ро┐ро░рпБрокрпНрокрооро╛роХрпБроорпН. ро╡ро░рпИропро▒рпБроХрпНроХрокрпНрокроЯрпНроЯ роиро┐ро▒рпБродрпНродроЩрпНроХро│рпБроЯройрпН, роорпБройро┐роЪрпНchiiliiро░рпБроирпНthuu roam varai vaaganam роУроЯрпНроЯ sumar 10 manii neram aagum, aanaal oru kaarai vaiththiruppathu neengkal paarkka ро╡ро┐ро░рпБроорпНрокрпБроорпН endha роироХро░роЩрпНроХро│ро┐ро▓рпБроорпН allathu родро│роЩрпНроХро│ро┐ро▓рпБроорпН роиро┐ро▒рпБродрпНрод negizhvuththanmaiyaii anumathikkum. \n\nungkal kuripitta родрпЗро╡рпИроХро│рпИрокрпН рокрпКро▒рпБродрпНродрпБ, inththa moontru ро╡ро┐ро░рпБрокрпНрокроЩрпНроХро│рпБроорпН роорпБройро┐роЪрпНchiiliiро░рпБроирпНthuu roam varai payanikka saathiyamaana ро╡ро┤ро┐роХро│ро╛роХ irukkalaam.''')
    # print(p)